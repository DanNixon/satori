---
name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:

jobs:
  formatting-and-quality:
    name: Formatting and Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
      - uses: cachix/install-nix-action@v31
      - uses: cachix/cachix-action@v16
        with:
          name: devenv
      - name: Install devenv.sh
        run: nix profile install nixpkgs#devenv

      - name: Format
        shell: devenv shell bash -- -e {0}
        run: treefmt --fail-on-change

      - name: cargo-deny
        shell: devenv shell bash -- -e {0}
        run: cargo deny check

      - name: Clippy
        shell: devenv shell bash -- -e {0}
        run: cargo clippy --all-targets -- -D warnings

      - name: Build
        shell: devenv shell bash -- -e {0}
        run: cargo build --all-targets

      - name: Tests
        shell: devenv shell bash -- -e {0}
        run: cargo test

  build-container-images:
    name: Build Container Images
    needs:
      - formatting-and-quality
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package:
          - satori-agent
          - satori-archiver
          - satori-event-processor
          - satorictl

    steps:
      - uses: actions/checkout@v5

      - name: Build image
        run: |
          buildah build \
            -f "${{ matrix.package }}/Containerfile" \
            -t "${{ matrix.package }}:latest" \
            .

      - name: Export image to archive
        run: |
          set -eo pipefail

          # See https://github.com/actions/runner-images/issues/10443
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

          skopeo copy \
            "containers-storage:localhost/${{ matrix.package }}:latest" \
            "docker-archive:/tmp/oci-image-${{ matrix.package }}.tar"

      - name: Upload image archive
        uses: actions/upload-artifact@v4
        with:
          name: oci-image-${{ matrix.package }}
          path: /tmp/oci-image-${{ matrix.package }}.tar

  integration-tests:
    name: Integration Tests
    needs:
      - build-container-images
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
      - uses: cachix/install-nix-action@v31
      - uses: cachix/cachix-action@v16
        with:
          name: devenv
      - name: Install devenv.sh
        run: nix profile install nixpkgs#devenv

      - name: Integration tests
        shell: devenv shell bash -- -e {0}
        run: cargo test integration_tests -- --ignored --test-threads=1

  publish-container-images:
    name: Publish Container Images
    if: (github.ref_name == 'main' || github.ref_type == 'tag') && github.repository == 'DanNixon/satori'
    needs:
      - build-container-images
      - integration-tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package:
          - satori-agent
          - satori-archiver
          - satori-event-processor
          - satorictl

    steps:
      - name: Download image archive
        uses: actions/download-artifact@v6
        with:
          name: oci-image-${{ matrix.package }}

      - name: Publish image
        run: |
          set -eo pipefail

          # See https://github.com/actions/runner-images/issues/10443
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

          local_cr="docker-archive:oci-image-${{ matrix.package }}.tar"

          # The container registry to push images to
          remote_cr="docker://ghcr.io/dannixon/${{ matrix.package }}"
          remote_cr_creds="${{ github.repository_owner }}:${{ github.token }}"

          # Push image using the Git ref name as the image tag (i.e. "main" or the tag name)
          skopeo copy --dest-creds="$remote_cr_creds" "$local_cr" "$remote_cr:${{ github.ref_name }}"

          # Push image using the Git SHA as the image tag
          skopeo copy --dest-creds="$remote_cr_creds" "$local_cr" "$remote_cr:${{ github.sha }}"

          # If the trigger was a tag (i.e. a release)
          if [[ "${{ github.ref_type }}" == 'tag' ]]; then
            skopeo copy --dest-creds="$remote_cr_creds" "$local_cr" "$remote_cr:latest"
          fi
